#!/usr/bin/env ruby

require 'bundler/setup'
Bundler.require

source = File.expand_path("#{__dir__}/../lib-opal")
target = File.expand_path("#{__dir__}/../source/javascripts")

watch = ARGV.delete('--watch')
force = ARGV.delete('--force')
names = ARGV.empty? ? Dir["#{source}/*.rb"].map { |f|
  Pathname(f).basename.sub(/(\.js)?\.rb$/, '')
} : ARGV

Opal::Config.arity_check_enabled = true
Opal.append_path source

assets_path = "#{target}/.assets.json"
assets = File.exist?(assets_path) ? JSON.parse(File.read(assets_path), symbolize_names: true) : {}

puts "[opal] target: #{target}"
FileUtils.mkpath target
require 'pathname'
$stdout.sync = true

build_js = -> {
  Dir["#{source}/*.js"].each do |path|
    target_path = "#{target}/#{File.basename path}"
    if !File.exist?(target_path) || File.mtime(path) > File.mtime(target_path)
      puts "[opal] copying #{path}..."
      File.write target_path, File.read(path)
      puts "[opal] copied #{path}."
    else
      puts "[opal] skipped #{path}."
    end
  end
}

build_rb = -> {
  names.each do |name|
    asset = (assets[name.to_s.to_sym] ||= {})

    target_file = Pathname(target).join("#{name}.js")
    max_mtime = -> { Dir["{Gemfile.lock,#{source}/**/*}"].map{|f| File.mtime(f)}.max }

    puts "[opal] building #{name}..."
    if !force && target_file.exist? && target_file.mtime >= max_mtime[]
      puts "[opal] skipped #{name}."
      next
    end

    begin
      builder = Opal::Builder.build("#{name}.js")
      js_code = Uglifier.new.compile(builder.to_s)
      digest = Digest::MD5.hexdigest js_code

      digest_name = "#{name}-#{digest}"
      digest_path = "#{target}/#{digest_name}.js"
      path = "#{target}/#{name}.js"
      asset.merge!(
        name: name,
        digest: digest,
        path: path,
        digest_path: digest_path,
        digest_name: digest_name,
        target: target,
      )

      File.write path, js_code
      File.write digest_path, js_code

      p assets

      # File.write "#{target}/#{name}.map { |e|  }", builder.source_map.to_s
      puts "[opal] built #{name}."
    rescue SyntaxError, StandardError
      warn($!)
      warn "[opal] DID NOT build #{name}."
    end

    File.write assets_path, assets.to_json
  end
}

build = -> {
  build_rb.()
  build_js.()
}

$exit = false
trap 'INT' do
  if $exit
    warn "\nForcing exit."
    exit 1
  else
    warn "\nWaiting for build to finish then exiting..."
    $exit = true
  end
end

if watch
  thread = Thread.new { build.() }
  listener = Listen.to(source) do |modified, added, removed|
    puts "modified absolute path: #{modified}"
    puts "added absolute path: #{added}"
    puts "removed absolute path: #{removed}"
    build.()
  end
  listener.start # not blocking
  until $exit
    sleep 1
  end
  listener.stop
  thread.join
else
  build.()
end

