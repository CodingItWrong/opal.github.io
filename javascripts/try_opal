/* Generated by Opal 0.11.4 */
(function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var TMP_12, self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send, $range = Opal.range, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$to_n', '$new', '$lambda', '$run_code', '$find', '$on', '$=~', '$[]', '$value=', '$-', '$strip', '$value', '$[]=', '$compile', '$eval_code', '$log_error', '$puts', '$<<', '$join', '$ready?', '$proc', '$print_to_output', '$instance', '$write_proc=']);
  
  self.$require("opal");
  self.$require("opal-parser");
  self.$require("opal-jquery");
  self.$require("js");
  Opal.const_set($nesting[0], 'DEFAULT_TRY_CODE', "" + "def title(s)\n" + "  puts \"~ \#{s} ~\\n\" + '~' * (s.size+4) + \"\\n\\n\"\n" + "  yield\n" + "  puts \"\\n\\n\\n\"\n" + "end\n" + "\n" + "title \"The basics\" do\n" + "  puts say = \"I love Ruby\"\n" + "  puts say.sub('love', \"*love*\").upcase\n" + "  3.times { puts \"\#{say.sub(\"love\", \"❤️\")}!\" }\n" + "end\n" + "\n" + "title \"Interacting with the DOM\" do\n" + "  require 'native'\n" + "  puts \"The page title is \#{$$[:document][:title].inspect}.\"\n" + "  puts \"The current URL is \#{$$[:location][:href].inspect}.\"\n" + "\n" + "  # Uncomment the following lines to ask for a name:\n" + "  #\n" + "  # name = $$.prompt \"Please enter your name\"\n" + "  # $$.alert(\"Hello \#{name}!\")\n" + "end\n" + "\n" + "title \"Classes, objects and procs\" do\n" + "  class User\n" + "    attr_accessor :name\n" + "\n" + "    def initialize(name)\n" + "      @name = name\n" + "    end\n" + "\n" + "    def admin?\n" + "      @name == 'Joe'\n" + "    end\n" + "\n" + "    def method_missing(name, *args, &block)\n" + "      if name.start_with?('can_') && name.end_with?('?')\n" + "        admin? ? true : false\n" + "      end\n" + "    end\n" + "  end\n" + "\n" + "  bob = User.new('Bob')\n" + "  joe = User.new('Joe')\n" + "\n" + "  user_is_admin = -> user do\n" + "    \"\#{user.name} \#{user.admin? ? 'is' : 'is not'} an admin.\"\n" + "  end\n" + "\n" + "  user_can_swim = -> user, action do\n" + "    \"\#{user.name} \#{user.can_swim? ? 'can' : 'cannot'} swim.\"\n" + "  end\n" + "\n" + "  puts user_is_admin.call joe\n" + "  puts user_can_swim.call joe\n" + "  puts user_is_admin.call bob\n" + "  puts user_can_swim.call bob\n" + "end\n");
  (function($base, $super, $parent_nesting) {
    function $TryOpal(){};
    var self = $TryOpal = $klass($base, $super, 'TryOpal', $TryOpal);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TryOpal_instance_4, TMP_TryOpal_initialize_7, TMP_TryOpal_run_code_8, TMP_TryOpal_eval_code_9, TMP_TryOpal_log_error_10, TMP_TryOpal_print_to_output_11;

    def.editor = def.output = def.link = def.viewer = def.flush = nil;
    
    (function($base, $super, $parent_nesting) {
      function $Editor(){};
      var self = $Editor = $klass($base, $super, 'Editor', $Editor);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Editor_initialize_1, TMP_Editor_value$eq_2, TMP_Editor_value_3;

      def["native"] = nil;
      
      
      Opal.defn(self, '$initialize', TMP_Editor_initialize_1 = function $$initialize(dom_id, options) {
        var self = this;

        return (self["native"] = CodeMirror(document.getElementById(dom_id), options.$to_n()))
      }, TMP_Editor_initialize_1.$$arity = 2);
      
      Opal.defn(self, '$value=', TMP_Editor_value$eq_2 = function(str) {
        var self = this;

        return self["native"].setValue(str)
      }, TMP_Editor_value$eq_2.$$arity = 1);
      return (Opal.defn(self, '$value', TMP_Editor_value_3 = function $$value() {
        var self = this;

        return self["native"].getValue()
      }, TMP_Editor_value_3.$$arity = 0), nil) && 'value';
    })($nesting[0], null, $nesting);
    Opal.defs(self, '$instance', TMP_TryOpal_instance_4 = function $$instance() {
      var $a, self = this;
      if (self.instance == null) self.instance = nil;

      return (self.instance = ($truthy($a = self.instance) ? $a : self.$new()))
    }, TMP_TryOpal_instance_4.$$arity = 0);
    
    Opal.defn(self, '$initialize', TMP_TryOpal_initialize_7 = function $$initialize() {
      var TMP_5, TMP_6, self = this, hash = nil, $writer = nil;

      
      self.flush = [];
      self.output = Opal.const_get_relative($nesting, 'Editor').$new("output", $hash2(["lineNumbers", "mode", "readOnly"], {"lineNumbers": false, "mode": "text", "readOnly": true}));
      self.viewer = Opal.const_get_relative($nesting, 'Editor').$new("viewer", $hash2(["lineNumbers", "mode", "readOnly", "theme"], {"lineNumbers": true, "mode": "javascript", "readOnly": true, "theme": "tomorrow-night-eighties"}));
      self.editor = Opal.const_get_relative($nesting, 'Editor').$new("editor", $hash2(["lineNumbers", "mode", "tabMode", "theme", "extraKeys"], {"lineNumbers": true, "mode": "ruby", "tabMode": "shift", "theme": "tomorrow-night-eighties", "extraKeys": $hash2(["Cmd-Enter"], {"Cmd-Enter": $send(self, 'lambda', [], (TMP_5 = function(){var self = TMP_5.$$s || this;

      return self.$run_code()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5))})}));
      self.link = Opal.const_get_relative($nesting, 'Element').$find("#link_code");
      $send(Opal.const_get_relative($nesting, 'Element').$find("#run_code"), 'on', ["click"], (TMP_6 = function(){var self = TMP_6.$$s || this;

      return self.$run_code()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6));
      hash = decodeURIComponent(location.hash || location.search);
      if ($truthy(hash['$=~'](/^[#?]code:/))) {
        
        $writer = [hash['$[]']($range(6, -1, false))];
        $send(self.editor, 'value=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
        } else {
        
        $writer = [Opal.const_get_relative($nesting, 'DEFAULT_TRY_CODE').$strip()];
        $send(self.editor, 'value=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      };
    }, TMP_TryOpal_initialize_7.$$arity = 0);
    
    Opal.defn(self, '$run_code', TMP_TryOpal_run_code_8 = function $$run_code() {
      var self = this, $writer = nil, code = nil, err = nil;

      
      self.flush = [];
      
      $writer = [""];
      $send(self.output, 'value=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      $writer = ["href", "" + "?code:" + (encodeURIComponent(self.editor.$value()))];
      $send(self.link, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      
      try {
        
        code = Opal.const_get_relative($nesting, 'Opal').$compile(self.editor.$value(), $hash2(["source_map_enabled"], {"source_map_enabled": false}));
        
        $writer = [code];
        $send(self.viewer, 'value=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return self.$eval_code(code);
      } catch ($err) {
        if (Opal.rescue($err, [Opal.const_get_relative($nesting, 'StandardError')])) {err = $err;
          try {
            return self.$log_error(err)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };;
    }, TMP_TryOpal_run_code_8.$$arity = 0);
    
    Opal.defn(self, '$eval_code', TMP_TryOpal_eval_code_9 = function $$eval_code(js_code) {
      var self = this;

      return eval(js_code)
    }, TMP_TryOpal_eval_code_9.$$arity = 1);
    
    Opal.defn(self, '$log_error', TMP_TryOpal_log_error_10 = function $$log_error(err) {
      var self = this;

      return self.$puts("" + (err) + "\n" + (err.stack))
    }, TMP_TryOpal_log_error_10.$$arity = 1);
    return (Opal.defn(self, '$print_to_output', TMP_TryOpal_print_to_output_11 = function $$print_to_output(str) {
      var self = this, $writer = nil;

      
      self.flush['$<<'](str);
      
      $writer = [self.flush.$join("")];
      $send(self.output, 'value=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;
    }, TMP_TryOpal_print_to_output_11.$$arity = 1), nil) && 'print_to_output';
  })($nesting[0], null, $nesting);
  return $send(Opal.const_get_relative($nesting, 'Document'), 'ready?', [], (TMP_12 = function(){var self = TMP_12.$$s || this, TMP_13, $writer = nil;
    if ($gvars.stderr == null) $gvars.stderr = nil;
    if ($gvars.stdout == null) $gvars.stdout = nil;

  
    
    $writer = [(($writer = [$send(self, 'proc', [], (TMP_13 = function(str){var self = TMP_13.$$s || this;
if (str == null) str = nil;
    return Opal.const_get_relative($nesting, 'TryOpal').$instance().$print_to_output(str)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13))]), $send($gvars.stderr, 'write_proc=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
    $send($gvars.stdout, 'write_proc=', Opal.to_a($writer));
    $writer[$rb_minus($writer["length"], 1)];;
    return Opal.const_get_relative($nesting, 'TryOpal').$instance().$run_code();}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12));
})(Opal);
