/* Generated by Opal 0.10.1 */
(function(Opal) {
  var $a, $b, TMP_12, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range, $gvars = Opal.gvars;

  Opal.add_stubs(['$require', '$to_n', '$new', '$lambda', '$run_code', '$find', '$on', '$=~', '$value=', '$[]', '$strip', '$[]=', '$value', '$compile', '$eval_code', '$log_error', '$puts', '$<<', '$join', '$ready?', '$write_proc=', '$proc', '$print_to_output', '$instance']);
  self.$require("opal");
  self.$require("opal-parser");
  self.$require("opal-jquery");
  Opal.cdecl($scope, 'DEFAULT_TRY_CODE', "class User\n  attr_accessor :name\n\n  def initialize(name)\n    @name = name\n  end\n\n  def admin?\n    @name == 'Admin'\n  end\nend\n\nuser = User.new('Bob')\nputs user\nputs user.admin?\n");
  (function($base, $super) {
    function $TryOpal(){};
    var self = $TryOpal = $klass($base, $super, 'TryOpal', $TryOpal);

    var def = self.$$proto, $scope = self.$$scope, TMP_4, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11;

    def.editor = def.output = def.link = def.viewer = def.flush = nil;
    (function($base, $super) {
      function $Editor(){};
      var self = $Editor = $klass($base, $super, 'Editor', $Editor);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      def["native"] = nil;
      Opal.defn(self, '$initialize', TMP_1 = function ːinitialize(dom_id, options) {
        var self = this;

        return self["native"] = CodeMirror(document.getElementById(dom_id), options.$to_n());
      }, TMP_1.$$arity = 2);

      Opal.defn(self, '$value=', TMP_2 = function(str) {
        var self = this;

        return self["native"].setValue(str);
      }, TMP_2.$$arity = 1);

      return (Opal.defn(self, '$value', TMP_3 = function ːvalue() {
        var self = this;

        return self["native"].getValue();
      }, TMP_3.$$arity = 0), nil) && 'value';
    })($scope.base, null);

    Opal.defs(self, '$instance', TMP_4 = function ːinstance() {
      var $a, self = this;
      if (self.instance == null) self.instance = nil;

      return ((($a = self.instance) !== false && $a !== nil && $a != null) ? $a : self.instance = self.$new());
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$initialize', TMP_7 = function ːinitialize() {
      var $a, $b, TMP_5, $c, TMP_6, $d, self = this, hash = nil;

      self.flush = [];
      self.output = $scope.get('Editor').$new("output", $hash2(["lineNumbers", "mode", "readOnly"], {"lineNumbers": false, "mode": "text", "readOnly": true}));
      self.viewer = $scope.get('Editor').$new("viewer", $hash2(["lineNumbers", "mode", "readOnly", "theme"], {"lineNumbers": true, "mode": "javascript", "readOnly": true, "theme": "tomorrow-night-eighties"}));
      self.editor = $scope.get('Editor').$new("editor", $hash2(["lineNumbers", "mode", "tabMode", "theme", "extraKeys"], {"lineNumbers": true, "mode": "ruby", "tabMode": "shift", "theme": "tomorrow-night-eighties", "extraKeys": $hash2(["Cmd-Enter"], {"Cmd-Enter": ($a = ($b = self).$lambda, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

      return self.$run_code()}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b)})}));
      self.link = $scope.get('Element').$find("#link_code");
      ($a = ($c = $scope.get('Element').$find("#run_code")).$on, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

      return self.$run_code()}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c, "click");
      hash = decodeURIComponent(location.hash || location.search);
      if ((($a = hash['$=~'](/^[#?]code:/)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($a = [hash['$[]']($range(6, -1, false))]), $d = self.editor, $d['$value='].apply($d, $a), $a[$a.length-1])
        } else {
        return (($a = [$scope.get('DEFAULT_TRY_CODE').$strip()]), $d = self.editor, $d['$value='].apply($d, $a), $a[$a.length-1])
      };
    }, TMP_7.$$arity = 0);

    Opal.defn(self, '$run_code', TMP_8 = function ːrun_code() {
      var $a, $b, self = this, code = nil, err = nil;

      self.flush = [];
      (($a = [""]), $b = self.output, $b['$value='].apply($b, $a), $a[$a.length-1]);
      self.link['$[]=']("href", "?code:" + (encodeURIComponent(self.editor.$value())));
      try {
        code = $scope.get('Opal').$compile(self.editor.$value(), $hash2(["source_map_enabled"], {"source_map_enabled": false}));
        (($a = [code]), $b = self.viewer, $b['$value='].apply($b, $a), $a[$a.length-1]);
        return self.$eval_code(code);
      } catch ($err) {
        if (Opal.rescue($err, [$scope.get('StandardError')])) {err = $err;
          try {
            return self.$log_error(err)
          } finally { Opal.pop_exception() }
        } else { throw $err; }
      };
    }, TMP_8.$$arity = 0);

    Opal.defn(self, '$eval_code', TMP_9 = function ːeval_code(js_code) {
      var self = this;

      return eval(js_code);
    }, TMP_9.$$arity = 1);

    Opal.defn(self, '$log_error', TMP_10 = function ːlog_error(err) {
      var self = this;

      return self.$puts("" + (err) + "\n" + (err.stack));
    }, TMP_10.$$arity = 1);

    return (Opal.defn(self, '$print_to_output', TMP_11 = function ːprint_to_output(str) {
      var $a, $b, self = this;

      self.flush['$<<'](str);
      return (($a = [self.flush.$join("")]), $b = self.output, $b['$value='].apply($b, $a), $a[$a.length-1]);
    }, TMP_11.$$arity = 1), nil) && 'print_to_output';
  })($scope.base, null);
  return ($a = ($b = $scope.get('Document'))['$ready?'], $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, $c, $d, $e, $f, $g, $h, TMP_13;
    if ($gvars.stderr == null) $gvars.stderr = nil;
    if ($gvars.stdout == null) $gvars.stdout = nil;

  (($c = [(($e = [($g = ($h = self).$proc, $g.$$p = (TMP_13 = function(str){var self = TMP_13.$$s || this;
if (str == null) str = nil;
    return $scope.get('TryOpal').$instance().$print_to_output(str)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $g).call($h)]), $f = $gvars.stderr, $f['$write_proc='].apply($f, $e), $e[$e.length-1])]), $d = $gvars.stdout, $d['$write_proc='].apply($d, $c), $c[$c.length-1]);
    return $scope.get('TryOpal').$instance().$run_code();}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $a).call($b);
})(Opal);
